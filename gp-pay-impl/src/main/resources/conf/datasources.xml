<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <bean id="dsCbsRead" class="${prop.jdbc.datasource}">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${prop.jdbc.cbs.read.url}" />
        <property name="username" value="${prop.jdbc.cbs.read.username}" />
        <property name="password" value="${prop.jdbc.cbs.read.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${prop.jdbc.default.pool.initialSize}"/>
        <property name="minIdle" value="${prop.jdbc.default.pool.minIdle}"/>
        <property name="maxActive" value="${prop.jdbc.default.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${prop.jdbc.default.pool.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${prop.jdbc.default.pool.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${prop.jdbc.default.pool.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <bean id="dsCbsWrite" class="${prop.jdbc.datasource}">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${prop.jdbc.cbs.write.url}" />
        <property name="username" value="${prop.jdbc.cbs.write.username}" />
        <property name="password" value="${prop.jdbc.cbs.write.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${prop.jdbc.default.pool.initialSize}"/>
        <property name="minIdle" value="${prop.jdbc.default.pool.minIdle}"/>
        <property name="maxActive" value="${prop.jdbc.default.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${prop.jdbc.default.pool.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${prop.jdbc.default.pool.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${prop.jdbc.default.pool.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>
    <bean id="readCbsSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:sql-mapper/read/*.xml" />
        <property name="dataSource" ref="dsCbsRead" />
    </bean>
    <bean id="writeCbsSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:sql-mapper/write/*.xml" />
        <property name="dataSource" ref="dsCbsWrite" />
    </bean>
	<bean id="readCbsMapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mph.coreapi.gp.pay.dao.read" />
		<property name="sqlSessionFactoryBeanName" value="readCbsSqlSessionFactory" />
	</bean>
    <bean id="writeCbsMapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mph.coreapi.gp.pay.dao.write" />
        <property name="sqlSessionFactoryBeanName" value="writeCbsSqlSessionFactory" />
    </bean>

	<!-- transactionManager事务 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dsCbsWrite" />
	</bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>